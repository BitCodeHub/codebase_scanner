import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  LineChart,
  Line,
  AreaChart,
  Area,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from 'recharts';
import { TrendingDown, TrendingUp, Minus } from 'lucide-react';
import { useApi } from '@/hooks/useApi';
import { format } from 'date-fns';

interface VulnerabilityTrendsProps {
  projectId?: string;
}

export function VulnerabilityTrends({ projectId }: VulnerabilityTrendsProps) {
  const api = useApi();
  const [trends, setTrends] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchTrends();
  }, [projectId]);

  const fetchTrends = async () => {
    if (!projectId) {
      setLoading(false);
      return;
    }

    try {
      // Fetch historical scans for the project
      const response = await api.get('/api/scans', {
        params: {
          project_id: projectId,
          limit: 10,
        },
      });

      const scans = response.data;
      if (scans.length > 0) {
        const trendData = calculateTrends(scans);
        setTrends(trendData);
      }
    } catch (error) {
      console.error('Failed to fetch trends:', error);
    } finally {
      setLoading(false);
    }
  };

  const calculateTrends = (scans: any[]) => {
    // Sort scans by date
    const sortedScans = scans.sort((a, b) => 
      new Date(a.created_at).getTime() - new Date(b.created_at).getTime()
    );

    // Calculate vulnerability counts over time
    const vulnerabilityTrend = sortedScans.map((scan) => ({
      date: format(new Date(scan.created_at), 'MMM dd'),
      total: scan.total_findings || 0,
      critical: scan.summary?.critical || 0,
      high: scan.summary?.high || 0,
      medium: scan.summary?.medium || 0,
      low: scan.summary?.low || 0,
    }));

    // Calculate security score trend
    const scoreTrend = sortedScans.map((scan) => ({
      date: format(new Date(scan.created_at), 'MMM dd'),
      score: calculateScoreFromSummary(scan.summary),
    }));

    // Calculate improvement rate
    const firstScan = sortedScans[0];
    const lastScan = sortedScans[sortedScans.length - 1];
    const improvement = (lastScan.total_findings || 0) - (firstScan.total_findings || 0);
    const improvementRate = firstScan.total_findings > 0 
      ? ((improvement / firstScan.total_findings) * 100).toFixed(1)
      : 0;

    return {
      vulnerabilityTrend,
      scoreTrend,
      improvementRate,
      totalScans: scans.length,
    };
  };

  const calculateScoreFromSummary = (summary: any) => {
    if (!summary) return 100;

    const weights = {
      critical: 40,
      high: 20,
      medium: 10,
      low: 5,
      info: 1,
    };

    let totalWeight = 0;
    Object.entries(summary).forEach(([severity, count]) => {
      if (weights[severity as keyof typeof weights]) {
        totalWeight += weights[severity as keyof typeof weights] * (count as number);
      }
    });

    const total = Object.values(summary).reduce((a: number, b: any) => a + (b || 0), 0);
    const maxWeight = total * weights.critical;
    const score = Math.max(0, 100 - (totalWeight / maxWeight) * 100);

    return Math.round(score);
  };

  if (loading) {
    return (
      <Card className="col-span-full">
        <CardHeader>
          <CardTitle>Security Trends</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center h-64">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!trends || trends.totalScans < 2) {
    return (
      <Card className="col-span-full">
        <CardHeader>
          <CardTitle>Security Trends</CardTitle>
          <CardDescription>
            Run multiple scans to see security trends over time
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center h-64 text-muted-foreground">
            <p>Not enough data to show trends</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  const TrendIcon = trends.improvementRate > 0 
    ? TrendingDown 
    : trends.improvementRate < 0 
    ? TrendingUp 
    : Minus;

  const trendColor = trends.improvementRate > 0 
    ? 'text-green-600' 
    : trends.improvementRate < 0 
    ? 'text-red-600' 
    : 'text-gray-600';

  return (
    <Card className="col-span-full">
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          Security Trends
          <div className={`flex items-center ${trendColor}`}>
            <TrendIcon className="h-5 w-5 mr-1" />
            <span className="text-sm font-medium">
              {Math.abs(Number(trends.improvementRate))}%
            </span>
          </div>
        </CardTitle>
        <CardDescription>
          Security metrics over the last {trends.totalScans} scans
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="vulnerabilities" className="space-y-4">
          <TabsList>
            <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
            <TabsTrigger value="score">Security Score</TabsTrigger>
            <TabsTrigger value="severity">By Severity</TabsTrigger>
          </TabsList>

          <TabsContent value="vulnerabilities" className="space-y-4">
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={trends.vulnerabilityTrend}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line 
                  type="monotone" 
                  dataKey="total" 
                  stroke="#8b5cf6" 
                  strokeWidth={2}
                  name="Total Vulnerabilities"
                />
              </LineChart>
            </ResponsiveContainer>
          </TabsContent>

          <TabsContent value="score" className="space-y-4">
            <ResponsiveContainer width="100%" height={300}>
              <AreaChart data={trends.scoreTrend}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis domain={[0, 100]} />
                <Tooltip />
                <Area 
                  type="monotone" 
                  dataKey="score" 
                  stroke="#10b981" 
                  fill="#10b981" 
                  fillOpacity={0.3}
                  name="Security Score"
                />
              </AreaChart>
            </ResponsiveContainer>
          </TabsContent>

          <TabsContent value="severity" className="space-y-4">
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={trends.vulnerabilityTrend}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line 
                  type="monotone" 
                  dataKey="critical" 
                  stroke="#dc2626" 
                  strokeWidth={2}
                  name="Critical"
                />
                <Line 
                  type="monotone" 
                  dataKey="high" 
                  stroke="#ea580c" 
                  strokeWidth={2}
                  name="High"
                />
                <Line 
                  type="monotone" 
                  dataKey="medium" 
                  stroke="#f59e0b" 
                  strokeWidth={2}
                  name="Medium"
                />
                <Line 
                  type="monotone" 
                  dataKey="low" 
                  stroke="#84cc16" 
                  strokeWidth={2}
                  name="Low"
                />
              </LineChart>
            </ResponsiveContainer>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
}