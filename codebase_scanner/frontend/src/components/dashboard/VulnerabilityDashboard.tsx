import React, { useEffect, useState } from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  PieChart,
  Pie,
  Cell,
  LineChart,
  Line,
  Area,
  AreaChart,
  ResponsiveContainer,
} from 'recharts';
import { Shield, AlertTriangle, TrendingDown, TrendingUp } from 'lucide-react';
import { useScanStore } from '@/stores/scanStore';
import { SecurityScore } from './SecurityScore';
import { CVSSDistribution } from './CVSSDistribution';
import { ComplianceStatus } from './ComplianceStatus';
import { VulnerabilityTrends } from './VulnerabilityTrends';

const SEVERITY_COLORS = {
  critical: '#dc2626',
  high: '#ea580c',
  medium: '#f59e0b',
  low: '#84cc16',
  info: '#06b6d4',
};

export function VulnerabilityDashboard() {
  const { currentScan, scanResults } = useScanStore();
  const [metrics, setMetrics] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (scanResults) {
      // Calculate metrics from scan results
      const calculatedMetrics = calculateMetrics(scanResults);
      setMetrics(calculatedMetrics);
      setLoading(false);
    }
  }, [scanResults]);

  const calculateMetrics = (results: any[]) => {
    const severityCounts = {
      critical: 0,
      high: 0,
      medium: 0,
      low: 0,
      info: 0,
    };

    const categoryCounts: Record<string, number> = {};
    const scannerCounts: Record<string, number> = {};

    results.forEach((result) => {
      // Count by severity
      const severity = result.severity?.toLowerCase() || 'info';
      if (severity in severityCounts) {
        severityCounts[severity as keyof typeof severityCounts]++;
      }

      // Count by category
      const category = result.category || 'other';
      categoryCounts[category] = (categoryCounts[category] || 0) + 1;

      // Count by scanner
      const scanner = result.scanner || 'unknown';
      scannerCounts[scanner] = (scannerCounts[scanner] || 0) + 1;
    });

    return {
      total: results.length,
      severityCounts,
      categoryCounts,
      scannerCounts,
      securityScore: calculateSecurityScore(severityCounts),
    };
  };

  const calculateSecurityScore = (severityCounts: any) => {
    const weights = {
      critical: 40,
      high: 20,
      medium: 10,
      low: 5,
      info: 1,
    };

    let totalWeight = 0;
    Object.entries(severityCounts).forEach(([severity, count]) => {
      totalWeight += weights[severity as keyof typeof weights] * (count as number);
    });

    const maxWeight = Object.values(severityCounts).reduce((a, b) => (a as number) + (b as number), 0) * weights.critical;
    const score = Math.max(0, 100 - (totalWeight / maxWeight) * 100);

    return Math.round(score);
  };

  if (loading || !metrics) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    );
  }

  const severityData = Object.entries(metrics.severityCounts)
    .filter(([_, count]) => (count as number) > 0)
    .map(([severity, count]) => ({
      name: severity.charAt(0).toUpperCase() + severity.slice(1),
      value: count as number,
      severity,
    }));

  const categoryData = Object.entries(metrics.categoryCounts)
    .sort(([, a], [, b]) => (b as number) - (a as number))
    .slice(0, 5)
    .map(([category, count]) => ({
      category,
      count,
    }));

  return (
    <div className="space-y-6">
      {/* Summary Cards */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Vulnerabilities</CardTitle>
            <AlertTriangle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{metrics.total}</div>
            <p className="text-xs text-muted-foreground">
              Found in current scan
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Security Score</CardTitle>
            <Shield className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{metrics.securityScore}%</div>
            <p className="text-xs text-muted-foreground">
              {metrics.securityScore >= 80 ? 'Good' : metrics.securityScore >= 60 ? 'Fair' : 'Needs Improvement'}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Critical Issues</CardTitle>
            <AlertTriangle className="h-4 w-4 text-red-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">
              {metrics.severityCounts.critical}
            </div>
            <p className="text-xs text-muted-foreground">
              Requires immediate attention
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">High Risk</CardTitle>
            <TrendingUp className="h-4 w-4 text-orange-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-600">
              {metrics.severityCounts.high}
            </div>
            <p className="text-xs text-muted-foreground">
              Should be fixed soon
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Charts Row 1 */}
      <div className="grid gap-4 md:grid-cols-2">
        {/* Severity Distribution */}
        <Card>
          <CardHeader>
            <CardTitle>Severity Distribution</CardTitle>
            <CardDescription>Breakdown of vulnerabilities by severity level</CardDescription>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={severityData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ name, value }) => `${name}: ${value}`}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {severityData.map((entry, index) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={SEVERITY_COLORS[entry.severity as keyof typeof SEVERITY_COLORS]}
                    />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        {/* Category Distribution */}
        <Card>
          <CardHeader>
            <CardTitle>Top Vulnerability Categories</CardTitle>
            <CardDescription>Most common types of security issues</CardDescription>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={categoryData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="category" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="count" fill="#8b5cf6" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      {/* Advanced Components */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        <SecurityScore score={metrics.securityScore} severityCounts={metrics.severityCounts} />
        <CVSSDistribution results={scanResults} />
        <ComplianceStatus scanId={currentScan?.id?.toString()} />
      </div>

      {/* Trends */}
      <VulnerabilityTrends projectId={currentScan?.project_id?.toString()} />
    </div>
  );
}
export default VulnerabilityDashboard;
