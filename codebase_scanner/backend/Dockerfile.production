# Memory-optimized Production Dockerfile for Codebase Scanner Backend
# Designed for Render's 512MB free tier
FROM python:3.11-slim AS base

# Set environment variables for memory optimization
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONMALLOC=malloc \
    MALLOC_ARENA_MAX=2 \
    LOG_DIR=/app/logs \
    TEMP_DIR=/app/temp \
    # Limit Python's memory usage
    PYTHONOPTIMIZE=2 \
    # Disable garbage collection debugging
    PYTHONGC=0

# Install only essential system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    curl \
    libmagic1 \
    nodejs \
    npm \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# Create app user early
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set work directory
WORKDIR /app

# Install Python dependencies in stages to minimize memory usage
COPY requirements.production.txt .

# Install core dependencies first
RUN pip install --no-cache-dir --no-compile \
    fastapi==0.104.1 \
    uvicorn[standard]==0.24.0.post1 \
    gunicorn==21.2.0 \
    python-multipart==0.0.6 \
    aiofiles==23.2.1 \
    supabase==2.7.4 \
    python-dotenv==1.0.1 \
    anthropic==0.40.0 \
    GitPython==3.1.43 \
    python-magic==0.4.27 \
    structlog==23.2.0 \
    psutil==6.1.0

# Install security tools separately to avoid memory spikes
RUN pip install --no-cache-dir --no-compile semgrep==1.127.0
RUN pip install --no-cache-dir --no-compile bandit==1.8.0
RUN pip install --no-cache-dir --no-compile safety==3.5.0
RUN pip install --no-cache-dir --no-compile detect-secrets==1.5.0

# Install GitLeaks with minimal footprint
RUN curl -sSfL https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz | tar -xz -C /usr/local/bin gitleaks && \
    chmod +x /usr/local/bin/gitleaks

# Copy application code
COPY app /app/app
COPY .env.example /app/.env.example
COPY gunicorn.conf.py /app/gunicorn.conf.py

# Create necessary directories with minimal permissions
RUN mkdir -p /app/logs /app/temp /app/uploads && \
    chown -R appuser:appuser /app && \
    chmod 755 /app/logs /app/temp /app/uploads

# Copy startup script
COPY scripts/start-production.sh /app/start.sh
RUN chmod +x /app/start.sh

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Health check with longer intervals to reduce overhead
HEALTHCHECK --interval=60s --timeout=30s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Use the memory-optimized startup script
CMD ["/app/start.sh"]